Proyecto Sistema de Tickets
===========================
:doctype: book
:docinfo:
:lang: es
:toc: left
:toc-title: Índice de Contenido
:toclevels: 4
:pagenums:
:chapter-label: Capítulo
:icons: font
:imagesdir: imagenes
:sectnums:
:sectnumlevels: 4
:leveloffset: 1
:source-highlighter: highlightjs
:source-linenums-option: enable



= icon:wrench[] Recursos

image::asciidoctor-logo-bl.svg[align="center",width=300]

[%header,cols=">,<"]

|===
|Tipo
|Valor

|Formato
|icon:pencil[] https://asciidoctor.org/[Asciidoctor]

|Herramienta
|icon:edit[] https://code.visualstudio.com/[Visual Studio Code]

|Extensiones de VSC
|icon:plug[] https://marketplace.visualstudio.com/items?itemName=asciidoctor.asciidoctor-vscode[AsciiDoc]

.^|Referencias
|icon:book[] https://docs.asciidoctor.org/[Asciidoctor Documentation Home]

icon:book[] https://nelbren.com/es/documentation/Documentation_with_Markdown_Marp_and_AsciiDoctor/[Documentación con Markdown, Marp y AsciiDoctor]

|===

= icon:check-square[] Rúbrica

image::rúbrica.png[align="center",width=300]

[%header%footer,cols=">.^1,.^5,>.^1"]
|===
|Inciso
|Descripción
|Puntos

3+^|*BACKEND*

|1
|Imagenes
|2

|2
|Instrucciones
|2


3+^|*API*

|3
|Código
|2

|4
|Imagenes
|2

3+^|*FRONTEND*

|5
|Imagenes
|2

|6
|Código
|4

3+^|*GESTIÓN*

|7
|Imagenes
|6

3+^|*DOCUMENTACIÓN*

|8
2+|AsciiDoctor y Ortografía

2+^|Total
>|*20*
|

|===

= icon:code[] Envió de Tickets por medio de API hacia Redmine

== icon:ticket[] Redmine

image::https://www.redmine.org/attachments/download/3458/redmine_logo_v1.png[align="center"]

=== icon:info[] Descripción

*Redmine* es una aplicación web de gestión de proyectos y seguimiento de incidencias. Es una herramienta flexible que permite la gestión de múltiples proyectos y subproyectos, facilitando la colaboración entre equipos y el seguimiento del progreso de las tareas.

=== icon:copyright[] Licencia

GNU GENERAL PUBLIC LICENSE

=== icon:gear[] Desarrollo

==== icon:server[] BACKEND


===== icon:download[] Instalación


====== icon:terminal[]Instrrucciones para la Instalación del Backend

====== icon:terminal[] Instalar Homebrew: Homebrew es un gestor de paquetes para macOS. Ya lo teniamos instalado:
[source,bash]
----
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
----

====== icon:terminal[] Instalar Ruby: Redmine requiere Ruby. Puedes instalar Ruby usando Homebrew:
[source,bash]
----
brew install ruby
----
image::Captura de pantalla 2024-06-10 a la(s) 3.22.06 p. m..png[align="center",width=1000]


====== icon:terminal[] Instalar Redmine: Puedes descargar Redmine desde el sitio web oficial o clonar el repositorio. Aquí están los comandos para clonar el repositorio de Git:
[source,bash]
----
git clone https://github.com/redmine/redmine.git
cd redmine
----

====== icon:terminal[] Instalar dependencias: Redmine tiene varias dependencias que deben ser instaladas. Usa Bundler para instalar estas dependencias:
[source,bash]
----
gem install bundler
bundle install --without development test
----

====== icon:terminal[] Configura la base de datos para Redmine. Aquí un ejemplo con SQLite3, pero puedes usar MySQL o PostgreSQL si lo prefieres:

   -Crea un archivo de configuración de la base de datos:
[source,bash]
----
cp config/database.yml.example config/database.yml
----
Edita el archivo config/database.yml para que coincida con tu configuración de base de datos. Un ejemplo para SQLite3 sería:
[source,bash]
----
production:
  adapter: sqlite3
  database: db/production.sqlite3
  pool: 5
  timeout: 5000

----
image::Captura de pantalla 2024-06-16 a la(s) 10.22.18 p. m..png[align="center",width=1000]

====== icon:terminal[] Generar claves y migrar la base de datos:

[source,bash]
----
bundle exec rake generate_secret_token
RAILS_ENV=production bundle exec rake db:migrate
----

====== icon:terminal[] Iniciar el servidor: Inicia el servidor de Redmine. Puedes usar el servidor web WEBrick que viene con Rails para propósitos de prueba:
[source,bash]
----
RAILS_ENV=production bundle exec rails server
----
image::PHOTO-2024-06-16-22-34-33.jpg[align="center",width=300]




====== icon:terminal[] Configuracion del Backend
====== icon:terminal[] Una vez con el servidor levantado, dirigirse al puerto local host 3000 y se mirara algo como esto 
image::IMG_3616.jpg[align="center",width=1000]


====== icon:terminal[] Crear un nuevo usuario utilizando la consola de Redmine, que se abre de la siguiente forma: 
[source,bash]
----
RAILS_ENV=production bundle exec rails console

----
image::PHOTO-2024-06-16-22-52-27.jpg[align="center",width=1000]

====== icon:terminal[] Una vez se tenga la consola abierta , actualizar el usuario y contraseña , en la consola de Rails, de la siguiente forma: 
[source,bash]
----
user = User.find_by_login('your_username')  # Reemplaza 'your_username' con el nombre de usuario del usuario
user.password = 'New@SecurePassword123'  # Reemplaza 'New@SecurePassword123' con la nueva contraseña que cumpla con los requisitos
user.password_confirmation = 'New@SecurePassword123'
user.save
----

====== icon:terminal[] Inicie sesión en el usuario de redmine, con el usuario y contraseña que creaste:

====== icon:terminal[] Una vez ya iniciado, dirigete a la sección de proyectos en la esquina superior izquierda y dale click donde dice nuevo Proyecto.
image::PHOTO-2024-06-16-22-58-41.jpg[align="center",width=1000]

====== icon:terminal[] Llena toda la información con la información de tu proyecto.(Haz click en Crear y Continuar)

image::PHOTO-2024-06-16-22-58-56.jpg[align="center",width=1000]

image::PHOTO-2024-06-16-22-59-25.jpg[align="center",width=1000]

====== icon:terminal[] Ahora dirígete a la sección de administración y carga los valores por defecto 
image::PHOTO-2024-06-16-23-06-06.jpg[align="center",width=10000]

====== icon:terminal[] Una vez con los valores ya cargados por defectos, dirígete ahí mismo en administración, a donde dice Tipos de Peticiones 

image::PHOTO-2024-06-16-23-08-22.jpg[align="center",width=1000]

image::PHOTO-2024-06-16-23-08-44.jpg[align="center",width=1000]

====== icon:terminal[] Una vez ya en la sección de peticiones, selecciona cada petición y vincúlala con tu proyecto marcando la casilla que tiene el nombre del mismo.   

image::PHOTO-2024-06-16-23-08-57.jpg[align="center",width=1000]

====== icon:terminal[] Esto sería todo para hacer la configuración manual del proyecto de tickets dentro de Redmine 

==== icon:plug[] API

image::https://assets.goodfirms.co/glossary/1655457664-api.png[align="center"]

===== icon:info[] Descripción

*API* Una API es un conjunto de definiciones y protocolos que permiten que diferentes software se comuniquen entre sí. Facilita la interacción entre distintos sistemas al permitir que las aplicaciones soliciten y compartan datos o funcionalidades, estandarizando las solicitudes y respuestas para asegurar una integración eficiente y coherente

===== icon:cube[] Herramientas

- icon:plug[] https://marketplace.visualstudio.com/items?itemName=humao.rest-client[REST Client - Extensión de Visual Studio Code] 



===== icon:list[] Listado antes de la prueba de envió

====== icon:code[] Código

- icon:gear[] list.http
+
[source,html]
----
### List issues
GET http://localhost:3000/issues.json
X-Redmine-API-Key: 3c96d6117865dae9d77dbb517c3972907e6d245c
Content-Type: application/json
----
image::PHOTO-2024-06-16-23-20-13.jpg[align="center",width=1000]
icon:picture-o[] Captura de pantalla

- icon:gear[] list.http

====== icon:terminal[] Notar que la cantidad de issues es 7.



image::PHOTO-2024-06-16-23-22-04.jpg[align="center",width=1000]



===== icon:send[] Prueba de envió

====== icon:code[] Código

- icon:gear[] send.http
+
[source,html]
----
### Test API redmine
@key = 3c96d6117865dae9d77dbb517c3972907e6d245c

### Create issue
POST http://localhost:3000/issues.json
X-Redmine-API-Key: 3c96d6117865dae9d77dbb517c3972907e6d245c
Content-Type: application/json

{
  "issue": {
    "project_id": "projecttickets",
    "subject": "Ticket subject",
    "description": "Prueba 2",
    "tracker_id": 1,
    "status_id": 1,
    "priority_id": 4
  }
}
----

====== icon:picture-o[] Captura de pantalla

- icon:gear[] send.http
+
image::PHOTO-2024-06-16-23-28-31.jpg[align="center",width=1000]

===== icon:list[] Listado después de la prueba de envió (NOTAR QUE AHORA EL COUNT ES DE 8)

====== icon:code[] Código

- icon:gear[] list.http
+
[source,html]
----
### List issues
GET http://localhost:3000/issues.json
X-Redmine-API-Key: 3c96d6117865dae9d77dbb517c3972907e6d245c
Content-Type: application/json
----
image::PHOTO-2024-06-16-23-30-33.jpg[align="center",width=1000]




- icon:ticket[] https://npr3s.com/control/projects/gti-0868-0498/issues[Peticiones en Proyecto gti-0868-0498 de Redmine]
+
image::PHOTO-2024-06-16-23-37-38.jpg[align="center",width=1000]

==== icon:code[] FRONTEND

===== icon:github[] Clonación

[source,bash]
----
git clone enlace
----

===== icon:download[] Instalación

[source,bash]
----
comandos para instalar el aplicativo de demostración
----

===== icon:terminal[] Ejecución

[source,bash]
----
export NODE_OPTIONS=--openssl-legacy-provider
npm start
----

===== icon:send[] Prueba de envió

====== icon:picture-o[] Captura de pantalla

- icon:gear[] App
+
image::PHOTO-2024-06-16-23-40-57.jpg[align="center",width=1000]

image::PHOTO-2024-06-16-23-41-27.jpg[align="center",width=1000]

===== icon:list[] Verificación de envió

====== icon:picture-o[] Captura de pantalla

- icon:ticket[] https://npr3s.com/control/projects/gti-0868-0498/issues[Peticiones en Proyecto gti-0868-0498 de Redmine]
+
image::PHOTO-2024-06-16-23-41-58.jpg[align="center",width=1000]

===== icon:code[] Código del App
- fuente/Main.js
+
[source,css]
----
import React, { useState } from "react";
import "./main.css";
import Swal from 'sweetalert2';

const Main = () => {
  const [subject, setSubject] = useState("");
  const [description, setDescription] = useState("");
  const AuthorizationHeader = '3c96d6117865dae9d77dbb517c3972907e6d245c'; // Clave API de Redmine

  const envioPeticion_Reporte = async (e) => {
    e.preventDefault();
    if (subject.length === 0 || description.length === 0) {
      Swal.fire({
        icon: 'warning',
        title: 'Advertencia',
        text: 'No se ingresó ningún reporte. Vuelva a intentar.',
      });
    } else {
      try {
        const response = await fetch('/issues.json', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Redmine-API-Key': AuthorizationHeader
          },
          body: JSON.stringify({
            issue: {
              project_id: 'projecttickets',
              subject: subject,
              description: description,
              tracker_id: 1, // Errores
              status_id: 1,  // Nueva
              priority_id: 4 // Urgente
            }
          })
        });

        const data = await response.json();
        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Creación Exitosa',
            text: "Se creó un reporte sobre el problema exitosamente. ID: " + data.issue.id
          }).then(() => {
            setSubject("");
            setDescription("");
          });
        } else {
          console.error('Error en la respuesta:', data);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Ocurrió un error al crear el reporte. ' + (data.errors ? data.errors.join(', ') : '')
          });
        }
      } catch (error) {
        console.error('Error al crear el issue:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Ocurrió un error al enviar la petición.'
        });
      }
    }
  }

  return (
    <div className="principal">
      <div className="cajaCentral">
        <h1 className="text">Reportar problema</h1>
        <form onSubmit={envioPeticion_Reporte}>
          <div className="inputContainer">
            <input
              type="text"
              className="entradaPeticion"
              placeholder="Ingrese el asunto"
              onChange={(event) => setSubject(event.target.value)}
              value={subject}
            />
          </div>
          <div className="inputContainer">
            <textarea
              className="entradaPeticion"
              placeholder="Ingrese reporte sobre problema"
              onChange={(event) => setDescription(event.target.value)}
              value={description}
            />
          </div>
          <button className="Sendbt" type="submit">Enviar</button>
        </form>
      </div>
    </div>
  )
}

export default Main;[]
----


- fuente/Main.css
+
[source,css]
----
body {
  background-color: #2b2b2b;
  color: #ffffff;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.principal {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.cajaCentral {
  background-color: #3c3c3c;
  border-radius: 15px;
  padding: 40px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  text-align: center;
  width: 500px;
}

.text {
  font-size: 2em;
  margin-bottom: 20px;
  border-bottom: 2px solid #ffffff;
  padding-bottom: 10px;
}

.inputContainer {
  margin-bottom: 20px;
}

.entradaPeticion {
  width: 80%;
  height: 40px;
  border-radius: 10px;
  padding: 15px;
  border: 1px solid #5a5a5a;
  margin-bottom: 10px;
  font-size: 1em;
  color: #2b2b2b;
  background-color: #ffffff;
}

textarea.entradaPeticion {
  height: 100px;
  resize: none;
}

.Sendbt {
  background-color: #4a4a4a;
  color: #ffffff;
  border: none;
  border-radius: 25px;
  padding: 10px 20px;
  font-size: 1.2em;
  cursor: pointer;
}

.Sendbt:hover {
  background-color: #5a5a5a;
}[]
----

- fuente/App.js
+
[source,javascript]
----
import './main.css';
import Main from './main';

function App() {
  return (
    <Main />
  );
}

export default App;[]
----



=== icon:gear[] Gestión

==== icon:book[] Proyecto 1/2

===== icon:plus[] Creación


===== icon:picture-o[] Captura de pantalla

- Evidencia
+
image::PHOTO-2024-06-16-22-58-41.jpg[align="center",width=1000]

image::PHOTO-2024-06-16-22-58-56.jpg[align="center",width=1000]

image::PHOTO-2024-06-16-22-59-25.jpg[align="center",width=1000]


==== icon:ticket[] Peticiones

===== icon:eye[] Ver



- Evidencia
+
image::PHOTO-2024-06-16-23-41-58.jpg[align="center",width=1000]

===== icon:edit[] Modificar


===== icon:picture-o[] Captura de pantalla

- Evidencia
+
image::PHOTO-2024-06-16-23-51-26.jpg[align="center",width=1000]

image::PHOTO-2024-06-16-23-51-42.jpg[align="center",width=1000]

===== icon:star[] Priorizar



===== icon:picture-o[] Captura de pantalla

- Evidencia
+
image::PHOTO-2024-06-16-23-52-27.jpg[align="center",width=1000]
image::PHOTO-2024-06-16-23-52-52.jpg[align="center",width=1000]




===== icon:wrench[] Trabajo


===== icon:picture-o[] Captura de pantalla

- Evidencia
+
image::PHOTO-2024-06-16-23-54-40.jpg[align="center",width=1000]

===== icon:trash[] Eliminar


===== icon:picture-o[] Captura de pantalla

- Evidencia
+
image::PHOTO-2024-06-16-23-55-44.jpg[align="center",width=1000]

==== icon:book[] Proyecto 2/2

===== icon:edit[] Modificar



===== icon:picture-o[] Captura de pantalla

- Evidencia
+
image::PHOTO-2024-06-16-23-57-08.jpg[align="center",width=1000]

===== icon:trash[] Eliminar


===== icon:picture-o[] Captura de pantalla

- Evidencia
+
image::PHOTO-2024-06-16-23-56-28.jpg[align="center",width=1000]

== icon:users[] Autores

Equipo #*X* 

[%header,cols=">,<"]
|===

|Cuenta
|Nombre

|icon:hashtag[] 12041044
|icon:user[] Edgar Membreño

|icon:hashtag[] 12041203
|icon:user[] Juan Membreño

|===

== icon:book[] Referencias

- icon:link[] https://docs.asciidoctor.org/[Asciidoctor Documentation Home]
- ...

[.text-center]
**Desarrollado** para *Gobernabilidad de Tecnologías de Información | UNITEC*